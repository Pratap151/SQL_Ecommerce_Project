CREATE DATABASE ecommerce;
SHOW TABLES FROM ecommerce;
SHOW TABLES IN ecommerce;


-- 1. What is the geographical spread of customers based on city-level data? (unique city customers located)

-- way 01
SELECT DISTINCT customer_city AS unique_city FROM customers;

-- way 02
SELECT customer_city FROM customers
GROUP BY 1;


-- 2. How many orders were placed during the year 2017? (Count the number of orders placed in 2017)

SELECT COUNT(order_id) AS count_orders
FROM orders
WHERE YEAR(order_purchase_timestamp) = 2017;


-- 3. What is the total revenue generated per product category? (Find the total sales per category)

select * from products; -- product_id, product category
SELECT p.`product category`, ROUND(SUM(py.payment_value), 2) AS total_sales   -- product category
FROM products p
JOIN order_items oi
ON p.product_id = oi.product_id
JOIN payments py
ON py.order_id = oi.order_id
GROUP BY 1;
 
 
-- 4. What percentage of customers chose to pay via installments? (Calculate the percentage of orders that were paid in installments)


-- way 01
SELECT 
		(SELECT COUNT(*) FROM payments
		WHERE payment_installments != 0) / (SELECT COUNT(*) FROM payments) * 100 AS  `installments_%`;

-- way 02
        
SELECT 
SUM(CASE WHEN payment_installments != 0 THEN 1 ELSE 0 END) / COUNT(*) * 100 AS `installments_%` FROM payments;
    


-- 5. How is the customer base distributed across states? (Count the number of customers from each state)
 

-- way 01
SELECT DISTINCT customer_state, COUNT(*) AS customer_count
FROM customers
GROUP BY 1;

-- way 02
SELECT customer_state, COUNT(*) AS customer_count
FROM customers
GROUP BY 1;



-- 6. Calculate the number of orders per month in 2018.

SELECT MONTHNAME(order_purchase_timestamp) AS  month, COUNT(order_id) AS order_qty
FROM orders
WHERE YEAR(order_purchase_timestamp) = '2018'
group by 1;




-- 7. Find the average number of products per order, grouped by customer city.

WITH qty_per_order AS
	(SELECT o.order_id, o.customer_id, COUNT(oi.order_id) AS order_count
	FROM orders o
	JOIN order_items oi
	ON o.order_id = oi.order_id
	GROUP BY o.order_id, o.customer_id )
    
SELECT c.customer_city, ROUND(AVG(order_count), 2) AS avg_num_product 
FROM customers c
JOIN qty_per_order AS qpo
ON c.customer_id = qpo.customer_id
GROUP BY c.customer_city;



-- 8. Calculate the percentage of total revenue contributed by each product category.

-- way 01

WITH category_wise_revenue AS
	(SELECT p.`product category`, ROUND(SUM(py.payment_value), 2) AS revenue
	FROM payments py
	JOIN order_items oi
	ON py.order_id = oi.order_id
	JOIN products p
	ON p.product_id = oi.product_id
	 GROUP BY p.`product category` )
     
SELECT `product category`, revenue, 
CONCAT(ROUND(revenue / (SELECT SUM(payment_value) FROM payments) * 100, 2), ' %') AS `%_contribution`
FROM category_wise_revenue;


-- way 02
SELECT p.`product category`, ROUND(SUM(py.payment_value), 2) AS revenue,
CONCAT(ROUND(SUM(py.payment_value) / (SELECT SUM(payment_value) FROM payments) * 100, 2), ' %') AS `%_distribution`
FROM payments py
JOIN order_items oi
ON py.order_id = oi.order_id
JOIN products p
ON p.product_id = oi.product_id
GROUP BY p.`product category`;



-- 9. Identify the correlation between product price and the number of times a product has been purchased.

SELECT p.`product category`, COUNT(oi.product_id) AS number_of_product_qty, ROUND(AVG(oi.price), 2) AS product_price
FROM order_items oi
JOIN products p
ON oi.product_id = p.product_id
GROUP BY p.`product category`;

-- Ans:
-- "There is no correlation between product price and the number of times a product has been purchased â€” 
-- the quantity purchased is not dependent on the product price, 
-- and the product price is not dependent on the quantity purchased."



-- 10. Calculate the total revenue generated by each seller, and rank them by revenue.

-- using subquery
SELECT seller_id, total_revenue, 
DENSE_RANK() OVER (ORDER BY total_revenue DESC) AS seller_rank
FROM (
		SELECT oi.seller_id, ROUND(SUM(py.payment_value), 2) AS total_revenue
		FROM order_items oi
		JOIN payments py
		ON oi.order_id = py.order_id
		GROUP BY oi.seller_id ) inner_table;
        

-- using cte
WITH seller_wise_revenue AS
	(SELECT oi.seller_id, ROUND(SUM(py.payment_value), 2) AS total_revenue
	FROM order_items oi
	JOIN payments py
	ON oi.order_id = py.order_id
	GROUP BY oi.seller_id)
    
SELECT seller_id, total_revenue,
DENSE_RANK() OVER (ORDER BY total_revenue DESC) AS seller_rank
FROM seller_wise_revenue;



-- 11. Calculate the moving average of order values for each customer over their order history.

WITH customer_payment_value AS
	(SELECT o.customer_id, o.order_purchase_timestamp, py.payment_value
	FROM orders o
	JOIN payments py
	ON o.order_id = py.order_id)
    
SELECT *, 
AVG(payment_value) OVER (PARTITION BY customer_id ORDER BY order_purchase_timestamp ROWS BETWEEN 2 PRECEDING AND 
CURRENT ROW ) AS moving_avg
FROM customer_payment_value;    


-- 12. Calculate the cumulative sales per month for each year.

WITH yearly_month_wise_sales AS
	(SELECT YEAR(o.order_purchase_timestamp) AS year_, MONTH(o.order_purchase_timestamp) AS month_, 
	SUM(py.payment_value) AS sales
	FROM orders o
	JOIN payments py
	ON o.order_id = py.order_id
	GROUP BY YEAR(o.order_purchase_timestamp), MONTH(o.order_purchase_timestamp)
    )
SELECT *, 
SUM(sales) OVER (ORDER BY year_, month_) AS cumulative_sales
FROM yearly_month_wise_sales;



-- 13. Calculate the year-over-year growth rate of total sales.

-- way 01 using CTE
WITH year_wise_revenue AS
	(SELECT YEAR(o.order_purchase_timestamp) AS years, ROUND(SUM(py.payment_value), 2) AS current_year
	FROM orders o
	JOIN payments py
	ON o.order_id = py.order_id
	GROUP BY years
	ORDER BY years)
    
SELECT *, LAG(current_year) OVER (ORDER BY years) AS previous_year,
((current_year - LAG(current_year) OVER (ORDER BY years)) / LAG(current_year) OVER (ORDER BY years)) * 100 AS `yoy_growth_%`
FROM year_wise_revenue;


-- way 02 using CTE and SUBQUERY
WITH year_wise_revenue AS
	(SELECT YEAR(o.order_purchase_timestamp) AS years, ROUND(SUM(py.payment_value), 2) AS current_year
	FROM orders o
	JOIN payments py
	ON o.order_id = py.order_id
	GROUP BY years
	ORDER BY years)
 
SELECT *, CONCAT(((current_year - previous_year)/previous_year) * 100, ' %') AS `yoy_growth_%`
FROM 
	(SELECT *, LAG(current_year) OVER (ORDER BY years) AS previous_year
	FROM year_wise_revenue ) A;
    
    
  
 
-- 14. Calculate the retention rate of customers, defined as the percentage of customers 
-- who make another purchase within 6 months of their first purchase. 

WITH customer_first_perchase AS
	(SELECT c.customer_id, MIN(o.order_purchase_timestamp) AS first_purchase
	FROM customers c
	JOIN orders o
	ON c.customer_id = o.customer_id
	GROUP BY c.customer_id ),
    
customer_2 AS     
    
	(SELECT cfp.customer_id, COUNT(DISTINCT o.order_purchase_timestamp) AS date_count
	FROM customer_first_perchase cfp
	JOIN orders o
	ON cfp.customer_id = o.customer_id
	AND o.order_purchase_timestamp > cfp.first_purchase
	AND o.order_purchase_timestamp < DATE_ADD(cfp.first_purchase, INTERVAL 6 MONTH)
	GROUP BY cfp.customer_id)
    
SELECT 100 * (COUNT(DISTINCT a.customer_id) / COUNT(DISTINCT b.customer_id)) AS retention_rate_of_customers -- to calculate retention rate
FROM customer_first_perchase a
LEFT JOIN customer_2 b
ON a.customer_id = b.customer_id;

-- Ans : Since none of the  customers are repeating so, it's null



-- 15. Identify the top 3 customers who spent the most money in each year.

WITH total_purchase_amount AS 
	(SELECT YEAR(o.order_purchase_timestamp) AS years, c.customer_id, SUM(py.payment_value) AS total_amount
	FROM customers c
	JOIN orders o
	ON c.customer_id = o.customer_id
	JOIN payments py
	ON py.order_id = o.order_id
	GROUP BY YEAR(o.order_purchase_timestamp), c.customer_id
	ORDER BY total_amount DESC ),
    
purchase_rank AS
    
	(SELECT *, RANK() OVER (PARTITION BY years ORDER BY total_amount DESC) AS rank_
	FROM total_purchase_amount)
    
SELECT * FROM purchase_rank
WHERE rank_ <= 3;   




   

    
    

     














